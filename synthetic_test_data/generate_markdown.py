import os
from .common import MD_DIR

def create_md_basic_elements(filename="all_basic_elements.md"):
    """
    Creates a Markdown file showcasing basic formatting elements.
    """
    filepath = os.path.join(MD_DIR, "basic", filename)
    
    content = """---
title: Basic Markdown Elements
author: Synthetic Data Generator
date: 2025-05-09
tags: [markdown, test, basic]
custom_field: SomeValue
---
# Header 1: The Nature of Synthesis
This document serves as a basic test for Markdown parsing.
## Header 2: Elements of Style
We explore *italicized text* for emphasis, and **bold text** for strong importance. 
Sometimes, we might use `inline code` for technical terms or snippets.
### Header 3: Lists and Organization
An unordered list:
- Item Alpha: The first principle.
- Item Beta: The second consideration.
  - Nested Item Beta.1: A sub-point.
  - Nested Item Beta.2: Another sub-point.
- Item Gamma: The final thought in this list.
An ordered list:
1. First step: Define requirements.
2. Second step: Generate synthetic data.
   1. Sub-step 2.1: Create EPUBs.
   2. Sub-step 2.2: Create PDFs.
   3. Sub-step 2.3: Create Markdown files.
3. Third step: Test the system.
### Header 3: Links and Images
A link to a [philosophical resource](https://plato.stanford.edu/).
An image placeholder (actual image file not generated by this script):
![Placeholder image of a classical bust](images/placeholder_bust.jpg)
---
> "The only true wisdom is in knowing you know nothing." 
> - Socrates (attributed)
This is a blockquote, often used for quotations or highlighted text.
"""
    try:
        with open(filepath, 'w', encoding='utf-8') as f: f.write(content)
        print(f"Successfully created Markdown: {filepath}")
    except Exception as e: print(f"Error creating Markdown {filepath}: {e}")

def create_md_extended_elements(filename="extended_elements.md"):
    """
    Creates a Markdown file with tables, footnotes, task lists, and code blocks.
    Uses TOML frontmatter.
    """
    filepath = os.path.join(MD_DIR, "extended", filename)
    
    content = """+++
title = "Extended Markdown Showcase"
author = "Synthetic Data Generator"
date = "2025-05-09"
category = "synthetic"
draft = false
description = "A test file for advanced Markdown features."
+++
# Extended Markdown Features
This document demonstrates more complex Markdown elements.
## Tables
A simple table:
| Philosopher | Key Idea             | Era      |
|-------------|----------------------|----------|
| Plato       | Theory of Forms      | Ancient  |
| Kant        | Categorical Imperative | Modern   |
| Nietzsche   | Will to Power        | Modern   |
A table with different alignments:
| Left Align  | Center Align | Right Align |
|:------------|:------------:|------------:|
| Col 3 is    | some wordy   |        $1600 |
| Col 2 is    | centered     |          $12 |
| zebra stripes | are neat   |           $1 |
## Footnotes
Here is some text with a footnote.[^1] And another one.[^2]
[^1]: This is the first footnote. It can contain **bold** and *italic* text.
[^2]: This is the second footnote. It might link to [another resource](https://example.com).
## Task Lists
- [x] Define requirements for synthetic data
- [ ] Generate EPUB files
  - [ ] Simple NCX
  - [ ] Nested NCX
- [ ] Generate PDF files
- [ ] Generate Markdown files
  - [x] Basic elements
  - [ ] Extended elements (this one!)
## Code Blocks
Python code block:
```python
def greet(name):
    print(f"Hello, {name}!")
greet("Philosopher")
```
JSON code block:
```json
{
  "concept": "Synthetic Data",
  "purpose": "Testing",
  "formats": ["EPUB", "PDF", "Markdown"]
}
```
Indented code block:

    // This is an indented code block
    // Often used for simpler snippets.
    function example() {
        return true;
    }
## Horizontal Rules
---
***
___
These are different ways to create horizontal rules.
"""
    try:
        with open(filepath, 'w', encoding='utf-8') as f: f.write(content)
        print(f"Successfully created Markdown: {filepath}")
    except Exception as e: print(f"Error creating Markdown {filepath}: {e}")

# Placeholder for more Markdown generation functions
# def create_md_json_frontmatter(...):
#   pass